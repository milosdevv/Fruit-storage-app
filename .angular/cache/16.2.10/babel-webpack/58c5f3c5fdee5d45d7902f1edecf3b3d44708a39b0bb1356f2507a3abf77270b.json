{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Product } from '../Model/Product';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ProductService {\n  constructor() {\n    this.http = inject(HttpClient);\n  }\n  createProduct(product) {\n    return this.http.post('https://storage-application-management-default-rtdb.firebaseio.com/products.json', product);\n  }\n  deleteProduct(id) {\n    return this.http.delete(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`);\n  }\n  deleteAllProducts() {\n    return this.http.delete('https://storage-application-management-default-rtdb.firebaseio.com/products.json');\n  }\n  updateProduct(id, product) {\n    return this.http.put(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`, product);\n  }\n  getProductDetails(id) {\n    return this.http.get(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`).pipe(map(response => {\n      let productDetail = {};\n      productDetail = {\n        ...Product\n      };\n      productDetail = {\n        ...response,\n        id: id\n      };\n      return productDetail;\n    }));\n  }\n  getAllproducts() {\n    return this.http.get('https://storage-application-management-default-rtdb.firebaseio.com/products.json').pipe(map(response => {\n      let products = [];\n      for (let key in response) {\n        if (response.hasOwnProperty(key)) {\n          products.push({\n            ...response[key],\n            id: key\n          });\n        }\n      }\n      return products;\n    }));\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","inject","Product","map","ProductService","constructor","http","createProduct","product","post","deleteProduct","id","delete","deleteAllProducts","updateProduct","put","getProductDetails","get","pipe","response","productDetail","getAllproducts","products","key","hasOwnProperty","push","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\milos\\Desktop\\ing app\\Inventory-management-app\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Product } from '../Model/Product';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  http:HttpClient = inject(HttpClient)\r\n  constructor() { }\r\n\r\n  createProduct(product:Product) {\r\n   return this.http.post<{name:string}>('https://storage-application-management-default-rtdb.firebaseio.com/products.json', product)\r\n  }\r\n\r\n  deleteProduct(id:string | undefined) {\r\n   return this.http.delete(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`)\r\n  }\r\n\r\n  deleteAllProducts() {\r\n    return this.http.delete('https://storage-application-management-default-rtdb.firebaseio.com/products.json')\r\n  }\r\n\r\n  updateProduct(id:string | undefined, product:Product) {\r\n   return this.http.put(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`, product)\r\n  }\r\n\r\n  getProductDetails(id:string | undefined) {\r\n    return this.http.get<{[key:string]: Product}>(`https://storage-application-management-default-rtdb.firebaseio.com/products/${id}.json`).pipe(map((response) => {\r\n      let productDetail = {};\r\n      productDetail = {...Product};\r\n      productDetail = {...response, id: id};\r\n      return productDetail;\r\n    }))\r\n  }\r\n\r\n  getAllproducts(){\r\n    return this.http.get<{ [key: string]: Product }>('https://storage-application-management-default-rtdb.firebaseio.com/products.json')\r\n     .pipe(\r\n       map((response) => {\r\n         let products: Product[] = [];\r\n         for (let key in response) {\r\n           if (response.hasOwnProperty(key)) {\r\n             products.push({ ...response[key], id: key });\r\n           }\r\n         }\r\n         return products;\r\n       })\r\n     )\r\n   }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAASC,MAAM,QAAoB,eAAe;AAClD,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,GAAG,QAAQ,MAAM;;AAK1B,OAAM,MAAOC,cAAc;EAEzBC,YAAA;IADA,KAAAC,IAAI,GAAcL,MAAM,CAACD,UAAU,CAAC;EACpB;EAEhBO,aAAaA,CAACC,OAAe;IAC5B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAgB,kFAAkF,EAAED,OAAO,CAAC;EAClI;EAEAE,aAAaA,CAACC,EAAqB;IAClC,OAAO,IAAI,CAACL,IAAI,CAACM,MAAM,CAAC,+EAA+ED,EAAE,OAAO,CAAC;EAClH;EAEAE,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACP,IAAI,CAACM,MAAM,CAAC,kFAAkF,CAAC;EAC7G;EAEAE,aAAaA,CAACH,EAAqB,EAAEH,OAAe;IACnD,OAAO,IAAI,CAACF,IAAI,CAACS,GAAG,CAAC,+EAA+EJ,EAAE,OAAO,EAAEH,OAAO,CAAC;EACxH;EAEAQ,iBAAiBA,CAACL,EAAqB;IACrC,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAA0B,+EAA+EN,EAAE,OAAO,CAAC,CAACO,IAAI,CAACf,GAAG,CAAEgB,QAAQ,IAAI;MAC5J,IAAIC,aAAa,GAAG,EAAE;MACtBA,aAAa,GAAG;QAAC,GAAGlB;MAAO,CAAC;MAC5BkB,aAAa,GAAG;QAAC,GAAGD,QAAQ;QAAER,EAAE,EAAEA;MAAE,CAAC;MACrC,OAAOS,aAAa;IACtB,CAAC,CAAC,CAAC;EACL;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACf,IAAI,CAACW,GAAG,CAA6B,kFAAkF,CAAC,CAClIC,IAAI,CACHf,GAAG,CAAEgB,QAAQ,IAAI;MACf,IAAIG,QAAQ,GAAc,EAAE;MAC5B,KAAK,IAAIC,GAAG,IAAIJ,QAAQ,EAAE;QACxB,IAAIA,QAAQ,CAACK,cAAc,CAACD,GAAG,CAAC,EAAE;UAChCD,QAAQ,CAACG,IAAI,CAAC;YAAE,GAAGN,QAAQ,CAACI,GAAG,CAAC;YAAEZ,EAAE,EAAEY;UAAG,CAAE,CAAC;;;MAGhD,OAAOD,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBA1CStB,cAAc;EAAA;EAAA,QAAAuB,EAAA,G;WAAdvB,cAAc;IAAAwB,OAAA,EAAdxB,cAAc,CAAAyB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}